#!/bin/busybox sh
#
rescue_shell() {
    echo "Something went wrong. Dropping to a shell."
    exec sh
}

get_root() {
    for cmd in $(cat /proc/cmdline) ; do
        case $cmd in
        root=*)
            type=$(echo $cmd | cut -d= -f2)
            if [ $type == "LABEL" ] || [ $type == "UUID" ] ; then
                uuid=$(echo $cmd | cut -d= -f3)
		findfs UUID=$uuid
            else
		echo $(echo $cmd | cut -d= -f2)
            fi
            ;;
        esac
    done
}

rescue_if_needed() {
    cat /proc/cmdline | grep single && rescue_shell
}

check_filesystem() {
    # most of code coming from /etc/init.d/fsck

    local fsck_opts= check_extra= RC_UNAME=$(uname -s)

    # FIXME : get_bootparam forcefsck
    if [ -e /forcefsck ]; then
	fsck_opts="$fsck_opts -f"
	check_extra="(check forced)"
    fi

    echo "Checking local filesystem $check_extra : $1"

    if [ "$RC_UNAME" = Linux ]; then
	fsck_opts="$fsck_opts -C0 -T"
    fi

    trap : INT QUIT

    # using our own fsck, not the builtin one from busybox
    /sbin/fsck -p $fsck_opts $1

    case $? in
	0)      return 0;;
	1)      echo "Filesystem repaired"; return 0;;
	2|3)    if [ "$RC_UNAME" = Linux ]; then
		    echo "Filesystem repaired, but reboot needed"
		    reboot -f
		else
		    rescue_shell "Filesystem still have errors; manual fsck required"
		fi;;
	4)      if [ "$RC_UNAME" = Linux ]; then
		    rescue_shell "Fileystem errors left uncorrected, aborting"
		else
		    echo "Filesystem repaired, but reboot needed"
		    reboot
		fi;;
	8)      echo "Operational error"; return 0;;
	12)     echo "fsck interrupted";;
	*)      echo "Filesystem couldn't be fixed";;
    esac
    rescue_shell
}

# Mount the /proc and /sys filesystems.
mount -t devtmpfs none /dev
mount -t proc none /proc
mount -t sysfs none /sys

# run terminal if single user mode specified
rescue_if_needed

# Do your stuff here.
echo "This script just mounts and boots the rootfs and maybe fscks it, nothing else! Screw you!"

# Mount the root filesystem.
# 8ba7f391-11cd-45bb-82f0-b65e9bf7533a -> root

ROOTFS=$(get_root)

check_filesystem $ROOTFS

mount -o ro $ROOTFS /mnt/root || rescue_shell

# Clean up.
umount /proc
umount /sys

# Boot the real thing.
exec switch_root /mnt/root /usr/lib/systemd/systemd
